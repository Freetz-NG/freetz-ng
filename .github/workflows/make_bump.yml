name: make_bump

on:
  push:
    branches: [ master ]
    paths:
      - 'docs/CHANGELOG.md'
      - 'make/pkgs/**'
      - 'make/libs/**'
  workflow_dispatch:
    inputs:
      bump:
        description: "FREETZ_PACKAGE - input in lowercase (e.g. dropbear)"
        required: true
        default: ""

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  build:
    container:
#     image: ubuntu:20.04
#     image: freetzng/firmware
      image: ghcr.io/freetz-ng/firmware
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        fritz: [ 
          "_WLAN        _FIRMWARE_04_XX",
          "_7270_V1     _FIRMWARE_04_XX  FREETZ_TARGET_IPV6_SUPPORT",
          "_7270_V3     _FIRMWARE_06_0X",
          "_7390        _FIRMWARE_05_2X",
          "_7390        _FIRMWARE_06_0X",
          "_7390        _FIRMWARE_06_2X",
          "_7490        _FIRMWARE_06_5X",
          "_7490        _FIRMWARE_07_2X",
          "_7580        _FIRMWARE_06_8X",
          "_7590_W5     _FIRMWARE_07_0X",
          "_7590_W5     _FIRMWARE_07_2X",
          "_7590_W5     _FIRMWARE_07_5X",
          "_1750        _FIRMWARE_07_0X",
          "_1750        _FIRMWARE_07_2X",
          "_7581        _FIRMWARE_07_1X",
          "_7530_W6_V1  _FIRMWARE_07_2X",
          "_7530_W6_V1  _FIRMWARE_07_5X",
          "_4040        _FIRMWARE_07_0X",
          "_1200_W5     _FIRMWARE_07_2X",
          "_7690        _FIRMWARE_07_5X",
          "_5590        _FIRMWARE_08_0X",
          "_6490        _FIRMWARE_06_8X",
          "_6590        _FIRMWARE_07_0X",
          "_6590        _FIRMWARE_07_2X",
          "_6591        _FIRMWARE_07_0X",
          "_6660        _FIRMWARE_07_1X",
          "_6660        _FIRMWARE_07_2X",
          "_6670        _FIRMWARE_07_5X",
          "_6690        _FIRMWARE_07_5X",
          "_6670        _FIRMWARE_08_0X",
         ]
    name: ${{ matrix.fritz }}${{ github.event.inputs.bump == '' && '' || ' - ${ github.event.inputs.bump }' }}
    runs-on: ubuntu-latest
#   if: github.repository == 'freetz-ng/freetz-ng'

    env:
      CACHE_KEY: "make_freetz"
    steps:

#     - name: update
#       run: apt-get -y update && apt-get -y upgrade && apt-get -y dist-upgrade
#
#     - name: install
#       run: |
#         DEBIAN_FRONTEND=noninteractive apt-get -y install \
#           locales \
#           pv cpio rsync kmod imagemagick inkscape graphicsmagick subversion git bc unar wget sudo gcc g++ binutils autoconf automake \
#           autopoint libtool-bin make bzip2 libncurses5-dev libreadline-dev zlib1g-dev flex bison patch texinfo tofrodos gettext pkg-config ecj \
#           perl libstring-crc32-perl ruby gawk libusb-dev unzip intltool libacl1-dev libcap-dev libc6-dev-i386 \
#           lib32ncurses5-dev gcc-multilib bsdmainutils lib32stdc++6 libglib2.0-dev ccache cmake lib32z1-dev libsqlite3-dev sqlite3 libzstd-dev \
#           netcat curl uuid-dev libssl-dev libgnutls28-dev u-boot-tools device-tree-compiler
#
#     - name: locale
#       run: locale-gen en_US.utf8 && locale-gen de_DE.UTF-8 && update-locale

      - name: sleep
        run: |
          SLEEP="$((1 + $(od -A n -t d -N 2 /dev/urandom | tr -d ' ') % 9))"
          echo "Sleeping $SLEEP seconds ..."
          sleep $SLEEP

      - name: myips
        run: |
          echo -n "IP: " ; wget -q https://ipaddress.ai    -O - || echo none
#         echo -n "V4: " ; wget -q https://ipaddress.ai -4 -O - || echo none
#         echo -n "V6: " ; wget -q https://ipaddress.ai -6 -O - || echo none

      - name: clone
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          umask 0022
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git clone https://github-actions:$GITHUB_TOKEN@${GITHUB_SERVER_URL##*/}/$GITHUB_REPOSITORY.git $GITHUB_WORKSPACE --branch $GITHUB_REF_NAME

      - name: cache_load
        uses: actions/cache/restore@v4
        if: always()
        with:
          path: |
            dl/*
            !dl/fw/*
          key: ${{ env.CACHE_KEY }}

      - name: config
        run: |
          truncate -s0 .config
          echo 'FREETZ_MODULES_OWN=""'                                                                >> .config
          for x in  UDEVMOUNT                               ; do echo "# FREETZ_PATCH_$x is not set"  >> .config; done
          for x in  dummy loop usbserial                   ; do echo "# FREETZ_MODULE_$x is not set"  >> .config; done
          for x in  DROPBEAR                              ; do echo "# FREETZ_PACKAGE_$x is not set"  >> .config; done
          for x in  LDD                                   ; do echo "# FREETZ_PACKAGE_$x is not set"  >> .config; done
          for x in  COMPRESSED  UNCOMPRESSED                        ; do echo "FREETZ_SIZEINFO_$x=y"  >> .config; done
          echo '# FREETZ_TOOLCHAIN_CCACHE is not set'                                                 >> .config
          echo 'FREETZ_VERBOSITY_FWMOD_2=y'                                                           >> .config
          echo 'FREETZ_VERBOSITY_LEVEL_0=y'                                                           >> .config
          echo 'FREETZ_VERBOSITY_LEVEL=0'                                                             >> .config
          echo 'FREETZ_SERIES_ALL=y'                                                                  >> .config
          echo 'FREETZ_USER_LEVEL_DEVELOPER=y'                                                        >> .config
          echo '# FREETZ_MODULES_TEST is not set'                                                     >> .config
          echo 'FREETZ_DL_SITE_USER="https://raw.githubusercontent.com/Freetz-NG/dl-mirror/master"'   >> .config
          echo 'FREETZ_REAL_DEVELOPER_ONLY__DLIMG="${{ secrets.ACTIONS_IMAGE }}"'                     >> .config
          echo 'FREETZ_REAL_DEVELOPER_ONLY__DLURL="${{ secrets.ACTIONS_DLTCS }}"'                     >> .config
          echo 'FREETZ_DOWNLOAD_TOOLCHAIN=y'                                                          >> .config
          echo 'FREETZ_HOSTTOOLS_DOWNLOAD=y'                                                          >> .config
          for x in ${{ matrix.fritz }}; do echo "$x=y" | sed 's/^_/FREETZ_TYPE_/'; done               >> .config
          grep -q '^FREETZ_TYPE_' .config || echo 'FREETZ_TYPE_7530_W6_V1=y'                          >> .config
          grep -q '^FREETZ_TYPE_FIRMWARE_' .config || echo 'FREETZ_TYPE_FIRMWARE_08_0X=y'             >> .config
          echo "################################################################" && du .config && wc -l .config

      - name: addon
        run: |
          echo "################################################################"
          wget -q "${{ secrets.ACTIONS_CUSTOM }}add" -O - 2>/dev/null | tar xj 2>/dev/null && echo Done || echo Null

#     - name: signature
#       run: |
#         mkdir -p .signature/ 2>/dev/null || true
#         for x in prv pub; do wget -q "${{ secrets.ACTIONS_CUSTOM }}$x" -O .signature/$x >/dev/null 2>&1 || rm -f .signature/$x; done
#         echo "################################################################" && ls -l .signature/

      - name: generate
        id: generate
        run: |
          if [ -n "${{ github.event.inputs.bump }}" ]; then
            PKG="${{ github.event.inputs.bump }}"
          else
            PKG="$(git log --format=%B -n1 ${{ github.sha }} | sed -nr 's/^(add|bump|fix|test) ([^ ,]*).*/\2/p')"
            [ -z "$PKG" ] && echo "No add, bump, fix or test." && exit
          fi
          PKG="$(echo "$PKG" | tr '[:lower:]' '[:upper:]')"
          pkg="$(echo "$PKG" | tr '[:upper:]' '[:lower:]')"
          echo "pkg=$pkg" >> $GITHUB_OUTPUT
          TYPE=""
          for x in pkgs libs; do [ -d make/$x/$pkg ] && TYPE=$x; done
          [ -z "$TYPE" ] && echo -n 'Waiting ' && for x in $(seq 60); do echo -n '.' && sleep 1; done && echo ' done.' && git pull
          for x in pkgs libs; do [ -d make/$x/$pkg ] && TYPE=$x; done
          [ -z "$TYPE" ] && echo "No directory." && exit
          [ "$TYPE" = "pkgs" ] && sed "/[^ ]FREETZ_PACKAGE_${PKG}[ =]/d"                                                                              -i .config
          [ "$TYPE" = "pkgs" ] && echo     "FREETZ_PACKAGE_$PKG=y"                                                                                    >> .config
          [ "$TYPE" = "pkgs" ] && sed "/[^ ]FREETZ_LIB_lib${pkg}[ =]/d"                                                                               -i .config
          [ "$TYPE" = "pkgs" ] && echo     "FREETZ_LIB_lib$pkg=y"                                                                                     >> .config
          [ "$TYPE" = "libs" ] && for x in $(sed -n 's/^[\tmenu]*config FREETZ_LIB_//p' make/libs/$pkg/Config.in); do sed "/[^ ]FREETZ_LIB_$x[ =]/d"  -i .config; done
          [ "$TYPE" = "libs" ] && for x in $(sed -n 's/^[\tmenu]*config FREETZ_LIB_//p' make/libs/$pkg/Config.in); do echo     "FREETZ_LIB_$x=y"      >> .config; done
          echo "################################################################" && bash -c "echo pkg=$pkg" && bash -c "echo PKG=$PKG"
          mkdir -p dl/ 2>/dev/null || true
          useradd freetz -s $(which bash) -d $(pwd) -M && chown freetz . -R
          su freetz -c "umask 0022 && make olddefconfig"
          BAD=y
          [ "$TYPE" = "pkgs" ] && grep -q "^FREETZ_PACKAGE_$PKG=y" .config && BAD=n
          [ "$TYPE" = "libs" ] && for x in $(sed -n 's/^[\tmenu]*config FREETZ_LIB_//p' make/libs/$pkg/Config.in); do grep -q "^FREETZ_LIB_$x=y" .config && BAD=n ; done
          echo "bad=$BAD" >> $GITHUB_OUTPUT
          [ "$BAD" = "y" ] && echo "Could not enable precompiled" && exit
          [ "$BAD" = "n" ] && su freetz -c "umask 0022 && make ${pkg}-precompiled"

      - name: result
        if: steps.generate.outputs.bad == 'n'
        run: |
          pkg="$(echo ${{ steps.generate.outputs.pkg }} | sed 's/lib//')"
          p="$(find packages/target-*/${pkg}-*/root/                      ! -type d 2>/dev/null || true)"
          l="$(find packages/target-*/root/usr/lib/freetz/ -name "*${pkg}*" -type f 2>/dev/null || true)"
          echo "################################################################"
          [ -z "$p$l" ] && echo "No binary output found." && exit
          [ -n "$p$l" ] && ls -al $p $l

#     - name: vars
#       id: vars
#       run: |
#         LINK="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
#         LAST="$(ls images/*.image | sed 's,.*/,,;s,\.image$,,')"
#         NAME="$(ls images/*.image | sed 's,.*/,,;s,_[0-9].*,,')"
#         [ -n "$LINK" ] && echo "link=$LINK" >> $GITHUB_OUTPUT
#         [ -n "$LAST" ] && echo "last=$LAST" >> $GITHUB_OUTPUT
#         [ -n "$NAME" ] && echo "name=$NAME" >> $GITHUB_OUTPUT
#         echo "################################################################"
#         echo "LINK=$LINK"
#         echo "LAST=$LAST"
#         echo "NAME=$NAME"
#         test -n "$NAME"

#     - name: cleanup
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         ACTIONS_NAME: ${{ steps.vars.outputs.name }}
#       run: |
#         git config --global --add safe.directory $GITHUB_WORKSPACE
#         git config --local credential.helper '!x() { echo "password=$GITHUB_TOKEN"; };x'
#         git tag -d $ACTIONS_NAME && git push --delete origin $ACTIONS_NAME || true
#     - name: release
#       uses: ncipollo/release-action@v1
#       with:
#         tag: ${{ steps.vars.outputs.name }}
#         name: ${{ steps.vars.outputs.name }}
#         body: |
#           ${{ steps.vars.outputs.last }}
#           ${{ steps.vars.outputs.link }}
#         prerelease: false
#         allowUpdates: true
#         removeArtifacts: false
#         artifacts: "images/*"
#         token: ${{ secrets.GITHUB_TOKEN }}
#         replacesArtifacts: false
#         artifactErrorsFailBuild: true
#         draft: true

#     - name: cache_clear
#       if: github.repository == 'freetz-ng/freetz-ng'
#       env:
#         ACTIONS_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
#         CACHE_KEY: ${{ env.CACHE_KEY }}
#       run: |
#         ASSETS="$(curl -s  -H "Accept: application/vnd.github+json"  -H "Authorization: Bearer $ACTIONS_TOKEN"  -H "X-GitHub-Api-Version: 2022-11-28"  "https://api.github.com/repos/${{ github.repository }}/actions/caches")"
#         ASSID="$(echo "$ASSETS" | grep -B7 "\"key\": *\"${CACHE_KEY}\"" | sed -rn 's/ *"id": *([^,]*),*/\1/p')"
#         curl -sL -X DELETE -H "Accept: application/vnd.github+json"  -H "Authorization: Bearer $ACTIONS_TOKEN"  -H "X-GitHub-Api-Version: 2022-11-28"  "https://api.github.com/repos/${{ github.repository }}/actions/caches/$ASSID" && echo "Deleted ASSID=${ASSID:-null} ..." || true
#     - name: cache_save
#       uses: actions/cache/save@v4
#       if: always()
#       with:
#         path: |
#           dl/*
#           !dl/tools-*.tar.xz
#           !dl/linux-*.tar.xz
#           !dl/fw/*.zip
#         key: ${{ env.CACHE_KEY }}


