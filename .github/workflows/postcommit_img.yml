name: postcommit_img

on:
  push:
    branches: [ master ]
    paths:
      - '.github/workflows/postcommit_img.yml'
      - 'config/.img/generate.sh'
      - 'config/mod/dl-firmware.in'
      - 'docs/FIRMWARES.md'
  workflow_dispatch:
    inputs:
      fos:
        description: "FOS Version to check"
        required: true
        default: "08_2X"
        type: choice
        options:
          - "Fos04"
          - "Fos05"
          - "Fos06"
          - "Fos07"
          - "Fos08"
          - "04_XX"
          - "05_2X"
          - "05_5X"
          - "06_0X"
          - "06_2X"
          - "06_5X"
          - "06_8X"
          - "06_9X"
          - "07_0X"
          - "07_1X"
          - "07_2X"
          - "07_5X"
          - "08_0X"
          - "08_2X"

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  build:
    container:
#     image: ubuntu:20.04
#     image: freetzng/dl-packs
      image: ghcr.io/freetz-ng/dl-packs
      options: --user 1001:1001
    runs-on: ubuntu-latest
    if: github.repository == 'freetz-ng/freetz-ng'

    steps:

#     - name: update
#       run: apt-get -y update && apt-get -y upgrade && apt-get -y dist-upgrade
#
#     - name: install
#       run: |
#         DEBIAN_FRONTEND=noninteractive apt-get -y install \
#           locales bash \
#           pv cpio rsync kmod imagemagick inkscape graphicsmagick subversion git bc unar wget sudo gcc g++ binutils autoconf automake \
#           autopoint libtool-bin make bzip2 libncurses5-dev libreadline-dev zlib1g-dev flex bison patch texinfo tofrodos gettext pkg-config ecj \
#           perl libstring-crc32-perl ruby ruby1.9 gawk libusb-dev unzip intltool libacl1-dev libcap-dev libc6-dev-i386 lib32ncurses5-dev \
#           gcc-multilib bsdmainutils lib32stdc++6 libglib2.0-dev ccache cmake lib32z1-dev libsqlite3-dev sqlite3 libzstd-dev netcat curl \
#           uuid-dev libssl-dev libgnutls28-dev u-boot-tools device-tree-compiler openssl build-essential libelf-dev
#
#     - name: locale
#       run: locale-gen en_US.utf8 && locale-gen de_DE.UTF-8 && update-locale

      - name: clone
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          set-safe-directory: true
          repository: ${{ github.repository }}
          ref: ${{ github.ref_name }}
          path: ${{ github.workspace }}
          fetch-depth: 0
          clean: false
          persist-credentials: true

      - name: parse
        id: parse
        run: |
          FOS="${{ github.event.inputs.fos }}"
          [ -z "$FOS" ] && FOS="08_2X"
          [ "$FOS" = "alles" ] && FOS="${FOS%es}"
          [ "$FOS" = "freetz_org" ] && FOS="$(sed -rn "s/^config FREETZ_AVM_HAS_FIRMWARE_(0[456])/\1/p" config/avm/availability.in) 07_0X 07_1X"
          [ "$FOS" = "freetz-ng" ] && FOS="07_2X 07_5X $(sed -rn "s/^config FREETZ_AVM_HAS_FIRMWARE_(0[89])/\1/p" config/avm/availability.in)"
          [ "$FOS" != "${FOS#Fos}" ] && FOS="${FOS#Fos}"
          for fos in $FOS; do \
            [ "${#fos}" != "3" ] && echo -n "FREETZ_AVM_VERSION_"; \
            echo -n "$fos "; \
          done | \
          sed 's/^/args="/;s/$/"/' >> $GITHUB_OUTPUT

      - name: vars
        run: |
          echo "################################################################"
          echo "args=${{ steps.parse.outputs.args }}" | sed 's/[= ]/&\n/g'

      - name: tools
        run: |
          echo 'FREETZ_USER_LEVEL_EXPERT=y\nFREETZ_HOSTTOOLS_DOWNLOAD=y\nFREETZ_DL_SITE_USER="https://raw.githubusercontent.com/Freetz-NG/dl-mirror/master"' > .config
          make tools

      - name: generate
        env:
          ACTIONS_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
          ACTIONS_IMAGE: ${{ secrets.ACTIONS_IMAGE }}
        run: |
          export LANG=en_US.utf8
          mkdir -p ~/.freetz-props/
          mkdir -p ~/.freetz-dl/fw/
          wget -q "${{ secrets.ACTIONS_CUSTOM }}img" -O - 2>/dev/null > props.sh
          [ -s props.sh ] || cp config/.img/generate.sh props.sh
          FREETZ_ENABLEG=true bash props.sh ${{ steps.parse.outputs.args }}
          rm -f props.sh ".wget-hsts" || true

      - name: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git pull
          git add config/.img/
          git status
          git config --local user.name github-actions[bot]
          git config --local user.email github-actions[bot]@users.noreply.github.com
          git diff --cached --quiet && exit 0 || git commit -m "img: automatic update"
          git config --local credential.helper '!x() { echo "password=$GITHUB_TOKEN"; };x'
          git push origin $GITHUB_REF_NAME


